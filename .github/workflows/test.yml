# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Run unit test

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
    # Service containers to run with `container-job`
    services:
      postgres:
        image: postgres:16-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: rssagg
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Goose
        run: go install github.com/pressly/goose/v3/cmd/goose@v3.16.0

      - name: Run Database Migrations
        run: goose -dir sql/schema postgres ${{ secrets.DB_URL }} up

      - name: Test
        env:
          DB_URL: ${{ secrets.DB_URL }}
        run: make test