// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feed_follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
INSERT INTO feed_follows (user_id, feed_id)
VALUES ($1, $2)
RETURNING id, feed_id, user_id, created_at, updated_at
`

type CreateFeedFollowsParams struct {
	UserID uuid.NullUUID `json:"user_id"`
	FeedID uuid.NullUUID `json:"feed_id"`
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeedFollows = `-- name: DeleteFeedFollows :exec
DELETE FROM feed_follows
WHERE id = $1
AND user_id = $2
`

type DeleteFeedFollowsParams struct {
	ID     uuid.UUID     `json:"id"`
	UserID uuid.NullUUID `json:"user_id"`
}

func (q *Queries) DeleteFeedFollows(ctx context.Context, arg DeleteFeedFollowsParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollows, arg.ID, arg.UserID)
	return err
}

const listFeedFollows = `-- name: ListFeedFollows :many
SELECT id, feed_id, user_id, created_at, updated_at FROM feed_follows
WHERE user_id = $1
ORDER BY updated_at DESC
LIMIT $2
OFFSET $3
`

type ListFeedFollowsParams struct {
	UserID uuid.NullUUID `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListFeedFollows(ctx context.Context, arg ListFeedFollowsParams) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedFollows, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FeedFollow{}
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
